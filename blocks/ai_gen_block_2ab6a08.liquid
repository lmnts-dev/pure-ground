{% doc %}
  @prompt
    search bar in the header section
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-search-bar-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
  }

  .ai-search-form-{{ ai_gen_id }} {
    position: relative;
    display: flex;
    align-items: center;
    background-color: {{ block.settings.background_color }};
    border: {{ block.settings.border_width }}px solid {{ block.settings.border_color }};
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }

  .ai-search-form-{{ ai_gen_id }}:focus-within {
    border-color: {{ block.settings.focus_border_color }};
    box-shadow: 0 0 0 2px {{ block.settings.focus_border_color }}33;
  }

  .ai-search-input-{{ ai_gen_id }} {
    flex: 1;
    padding: {{ block.settings.input_padding }}px;
    border: none;
    background: transparent;
    color: {{ block.settings.text_color }};
    font-size: {{ block.settings.font_size }}px;
    outline: none;
  }

  .ai-search-input-{{ ai_gen_id }}::placeholder {
    color: {{ block.settings.placeholder_color }};
  }

  .ai-search-button-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: {{ block.settings.input_padding }}px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_icon_color }};
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease;
    min-width: 48px;
  }

  .ai-search-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-search-button-{{ ai_gen_id }} svg {
    width: {{ block.settings.icon_size }}px;
    height: {{ block.settings.icon_size }}px;
  }

  .ai-search-suggestions-{{ ai_gen_id }} {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: {{ block.settings.suggestions_bg_color }};
    border: 1px solid {{ block.settings.border_color }};
    border-top: none;
    border-radius: 0 0 {{ block.settings.border_radius }}px {{ block.settings.border_radius }}px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    display: none;
    max-height: 300px;
    overflow-y: auto;
  }

  .ai-search-suggestions-{{ ai_gen_id }}.active {
    display: block;
  }

  .ai-search-suggestion-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    padding: 12px {{ block.settings.input_padding }}px;
    color: {{ block.settings.text_color }};
    text-decoration: none;
    border-bottom: 1px solid {{ block.settings.border_color }}22;
    transition: background-color 0.2s ease;
  }

  .ai-search-suggestion-{{ ai_gen_id }}:hover,
  .ai-search-suggestion-{{ ai_gen_id }}:focus {
    background-color: {{ block.settings.suggestion_hover_color }};
  }

  .ai-search-suggestion-{{ ai_gen_id }}:last-child {
    border-bottom: none;
  }

  .ai-search-suggestion-image-{{ ai_gen_id }} {
    width: 40px;
    height: 40px;
    object-fit: cover;
    border-radius: 4px;
    margin-right: 12px;
    flex-shrink: 0;
  }

  .ai-search-suggestion-content-{{ ai_gen_id }} {
    flex: 1;
  }

  .ai-search-suggestion-title-{{ ai_gen_id }} {
    font-weight: 500;
    margin: 0 0 4px;
    font-size: 14px;
  }

  .ai-search-suggestion-price-{{ ai_gen_id }} {
    font-size: 12px;
    color: {{ block.settings.placeholder_color }};
    margin: 0;
  }

  .ai-search-no-results-{{ ai_gen_id }} {
    padding: 16px {{ block.settings.input_padding }}px;
    text-align: center;
    color: {{ block.settings.placeholder_color }};
    font-size: 14px;
  }

  @media screen and (max-width: 749px) {
    .ai-search-bar-{{ ai_gen_id }} {
      max-width: 100%;
    }
    
    .ai-search-input-{{ ai_gen_id }} {
      font-size: {{ block.settings.font_size | times: 0.9 }}px;
    }
  }
{% endstyle %}

<search-bar-{{ ai_gen_id }}
  class="ai-search-bar-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <form
    action="{{ routes.search_url }}"
    method="get"
    class="ai-search-form-{{ ai_gen_id }}"
    role="search"
  >
    <input
      type="search"
      name="q"
      class="ai-search-input-{{ ai_gen_id }}"
      placeholder="{{ block.settings.placeholder_text }}"
      value="{{ search.terms | escape }}"
      autocomplete="off"
      aria-label="Search products"
      data-search-input
    >
    <button
      type="submit"
      class="ai-search-button-{{ ai_gen_id }}"
      aria-label="Search"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
    </button>
  </form>

  {% if block.settings.enable_predictive_search %}
    <div class="ai-search-suggestions-{{ ai_gen_id }}" data-search-suggestions>
      <div class="ai-search-no-results-{{ ai_gen_id }}" data-no-results style="display: none;">
        No results found
      </div>
    </div>
  {% endif %}
</search-bar-{{ ai_gen_id }}>

{% if block.settings.enable_predictive_search %}
<script>
  (function() {
    class SearchBar{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.input = this.querySelector('[data-search-input]');
        this.suggestions = this.querySelector('[data-search-suggestions]');
        this.noResults = this.querySelector('[data-no-results]');
        this.searchTimeout = null;
        this.currentQuery = '';
      }

      connectedCallback() {
        if (!this.input || !this.suggestions) return;
        
        this.input.addEventListener('input', this.handleInput.bind(this));
        this.input.addEventListener('focus', this.handleFocus.bind(this));
        document.addEventListener('click', this.handleDocumentClick.bind(this));
      }

      handleInput(event) {
        const query = event.target.value.trim();
        
        if (this.searchTimeout) {
          clearTimeout(this.searchTimeout);
        }

        if (query.length < 2) {
          this.hideSuggestions();
          return;
        }

        this.searchTimeout = setTimeout(() => {
          this.performSearch(query);
        }, 300);
      }

      handleFocus() {
        if (this.currentQuery && this.suggestions.children.length > 1) {
          this.showSuggestions();
        }
      }

      handleDocumentClick(event) {
        if (!this.contains(event.target)) {
          this.hideSuggestions();
        }
      }

      async performSearch(query) {
        if (query === this.currentQuery) return;
        
        this.currentQuery = query;
        
        try {
          const response = await fetch(`${window.routes.predictive_search_url}?q=${encodeURIComponent(query)}&resources[type]=product&resources[limit]=5&section_id=predictive-search`);
          const text = await response.text();
          const resultsContainer = document.createElement('div');
          resultsContainer.innerHTML = text;
          
          this.displayResults(resultsContainer, query);
        } catch (error) {
          console.error('Search error:', error);
          this.hideSuggestions();
        }
      }

      displayResults(resultsContainer, query) {
        const products = resultsContainer.querySelectorAll('[data-predictive-search-product]');
        
        this.suggestions.innerHTML = '';
        
        if (products.length === 0) {
          this.noResults.style.display = 'block';
          this.suggestions.appendChild(this.noResults);
          this.showSuggestions();
          return;
        }

        products.forEach(product => {
          const link = product.querySelector('a');
          const image = product.querySelector('img');
          const title = product.querySelector('[data-predictive-search-title]');
          const price = product.querySelector('[data-predictive-search-price]');
          
          if (link && title) {
            const suggestion = document.createElement('a');
            suggestion.href = link.href;
            suggestion.className = 'ai-search-suggestion-{{ ai_gen_id }}';
            
            let imageHtml = '';
            if (image) {
              imageHtml = `<img src="${image.src}" alt="${image.alt || ''}" class="ai-search-suggestion-image-{{ ai_gen_id }}" loading="lazy">`;
            }
            
            let priceHtml = '';
            if (price) {
              priceHtml = `<p class="ai-search-suggestion-price-{{ ai_gen_id }}">${price.textContent}</p>`;
            }
            
            suggestion.innerHTML = `
              ${imageHtml}
              <div class="ai-search-suggestion-content-{{ ai_gen_id }}">
                <h3 class="ai-search-suggestion-title-{{ ai_gen_id }}">${title.textContent}</h3>
                ${priceHtml}
              </div>
            `;
            
            this.suggestions.appendChild(suggestion);
          }
        });
        
        this.showSuggestions();
      }

      showSuggestions() {
        this.suggestions.classList.add('active');
      }

      hideSuggestions() {
        this.suggestions.classList.remove('active');
      }
    }

    customElements.define('search-bar-{{ ai_gen_id }}', SearchBar{{ ai_gen_id }});
  })();
</script>
{% endif %}

{% schema %}
{
  "name": "Search bar",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Search settings"
    },
    {
      "type": "text",
      "id": "placeholder_text",
      "label": "Placeholder text",
      "default": "Search products..."
    },
    {
      "type": "checkbox",
      "id": "enable_predictive_search",
      "label": "Enable predictive search",
      "default": true
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 200,
      "max": 800,
      "step": 20,
      "unit": "px",
      "label": "Maximum width",
      "default": 400
    },
    {
      "type": "range",
      "id": "input_padding",
      "min": 8,
      "max": 24,
      "step": 2,
      "unit": "px",
      "label": "Input padding",
      "default": 12
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Font size",
      "default": 14
    },
    {
      "type": "range",
      "id": "icon_size",
      "min": 16,
      "max": 28,
      "step": 2,
      "unit": "px",
      "label": "Search icon size",
      "default": 20
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 4,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "placeholder_color",
      "label": "Placeholder color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "focus_border_color",
      "label": "Focus border color",
      "default": "#007acc"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Search button color",
      "default": "#007acc"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Search button hover color",
      "default": "#005999"
    },
    {
      "type": "color",
      "id": "button_icon_color",
      "label": "Search button icon color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Predictive search colors"
    },
    {
      "type": "color",
      "id": "suggestions_bg_color",
      "label": "Suggestions background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "suggestion_hover_color",
      "label": "Suggestion hover color",
      "default": "#f5f5f5"
    }
  ],
  "presets": [
    {
      "name": "Search bar"
    }
  ]
}
{% endschema %}